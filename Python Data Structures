## **Python Data Structures Cheat Sheet**

## **List**

- **`append()`**
  - **Description**: Adds an element to the end of the list.
  - **Usage**:
 
    fruits = ["apple", "banana", "orange"]
    fruits.append("mango")
    print(fruits)  # Output: ["apple", "banana", "orange", "mango"]
    ```

- **`copy()`**
  - **Description**: Creates a shallow copy of the list.
  - **Usage**:

    my_list = [1, 2, 3, 4, 5]
    new_list = my_list.copy()
    print(new_list)  # Output: [1, 2, 3, 4, 5]
    ```

- **`count()`**
  - **Description**: Counts the occurrences of a specific element in the list.
  - **Usage**:

    my_list = [1, 2, 2, 3, 4, 2, 5, 2]
    count = my_list.count(2)
    print(count)  # Output: 4
    ```

- **Creating a List**
  - **Description**: A list is an ordered, mutable collection of elements, enclosed in square brackets.
  - **Usage**:
  
    fruits = ["apple", "banana", "orange", "mango"]
    ```

- **`del`**
  - **Description**: Removes an element at a specified index.
  - **Usage**:

    my_list = [10, 20, 30, 40, 50]
    del my_list[2]
    print(my_list)  # Output: [10, 20, 40, 50]
    ```

- **`extend()`**
  - **Description**: Adds multiple elements to the end of the list.
  - **Usage**:

    fruits = ["apple", "banana", "orange"]
    more_fruits = ["mango", "grape"]
    fruits.extend(more_fruits)
    print(fruits)  # Output: ["apple", "banana", "orange", "mango", "grape"]
    ```

- **Indexing**
  - **Description**: Accesses individual elements by their position, starting from 0.
  - **Usage**:

    my_list = [10, 20, 30, 40, 50]
    print(my_list[0])  # Output: 10
    print(my_list[-1])  # Output: 50
    ```

- **`insert()`**
  - **Description**: Inserts an element at a specified index.
  - **Usage**:

    my_list = [1, 2, 3, 4, 5]
    my_list.insert(2, 6)
    print(my_list)  # Output: [1, 2, 6, 3, 4, 5]
    ```

- **Modifying a List**
  - **Description**: Updates or assigns new values to specific elements.
  - **Usage**:
 
    my_list = [10, 20, 30, 40, 50]
    my_list[1] = 25
    print(my_list)  # Output: [10, 25, 30, 40, 50]
    ```

- **`pop()`**
  - **Description**: Removes and returns the element at the specified index or the last element if no index is provided.
  - **Usage**:

    my_list = [10, 20, 30, 40, 50]
    removed_element = my_list.pop(2)
    print(removed_element)  # Output: 30
    print(my_list)  # Output: [10, 20, 40, 50]
    ```

- **`remove()`**
  - **Description**: Removes the first occurrence of a specific value.
  - **Usage**:

    my_list = [10, 20, 30, 40, 50]
    my_list.remove(30)
    print(my_list)  # Output: [10, 20, 40, 50]
    ```

- **`reverse()`**
  - **Description**: Reverses the order of elements in the list.
  - **Usage**:

    my_list = [1, 2, 3, 4, 5]
    my_list.reverse()
    print(my_list)  # Output: [5, 4, 3, 2, 1]
    ```

- **Slicing**
  - **Description**: Accesses a range of elements using start, end, and step indices.
  - **Usage**:

    my_list = [1, 2, 3, 4, 5]
    print(my_list[1:4])  # Output: [2, 3, 4]
    print(my_list[:3])  # Output: [1, 2, 3]
    print(my_list[2:])  # Output: [3, 4, 5]
    print(my_list[::2])  # Output: [1, 3, 5]
    ```

- **`sort()`**
  - **Description**: Sorts the elements of the list in ascending or descending order.
  - **Usage**:

    my_list = [5, 2, 8, 1, 9]
    my_list.sort()
    print(my_list)  # Output: [1, 2, 5, 8, 9]
    my_list.sort(reverse=True)
    print(my_list)  # Output: [9, 8, 5, 2, 1]
    ```

## **Dictionary**

- **Accessing Values**
  - **Description**: Retrieves values using their corresponding keys.
  - **Usage**:
  
    person = {"name": "John", "age": 30, "city": "New York"}
    name = person["name"]
    age = person["age"]
    ```

- **Add or Modify**
  - **Description**: Adds or updates key-value pairs.
  - **Usage**:

    person["Country"] = "USA"  # Adds a new key-value pair
    person["city"] = "Chicago"  # Updates the value for the key "city"
    ```

- **`clear()`**
  - **Description**: Empties the dictionary, removing all key-value pairs.
  - **Usage**:

    person.clear()
    ```

- **`copy()`**
  - **Description**: Creates a shallow copy of the dictionary.
  - **Usage**:

    new_person = person.copy()
    ```

- **Creating a Dictionary**
  - **Description**: Represents a collection of key-value pairs enclosed in curly braces.
  - **Usage**:

    person = {"name": "John", "age": 30, "city": "New York"}
    ```

- **`del`**
  - **Description**: Removes a key-value pair from the dictionary.
  - **Usage**:

    del person["Country"]
    ```

- **`items()`**
  - **Description**: Retrieves all key-value pairs as a list of tuples.
  - **Usage**:

    items_list = list(person.items())
    ```

- **Key Existence**
  - **Description**: Checks if a key exists in the dictionary.
  - **Usage**:

    if "name" in person:
        print("Name exists in the dictionary.")
    ```

- **`keys()`**
  - **Description**: Retrieves all keys from the dictionary.
  - **Usage**:
    
    keys_list = list(person.keys())
  

- **`update()`**
  - **Description**: Merges another dictionary into the existing one.
  - **Usage**:

    person.update({"email": "john@example.com", "age": 31})
 
